// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.10
// source: proto/pushnotification.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifSubscriberClient is the client API for NotifSubscriber service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifSubscriberClient interface {
	SubscribeMessage(ctx context.Context, in *SubscribeMsg, opts ...grpc.CallOption) (NotifSubscriber_SubscribeMessageClient, error)
}

type notifSubscriberClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifSubscriberClient(cc grpc.ClientConnInterface) NotifSubscriberClient {
	return &notifSubscriberClient{cc}
}

func (c *notifSubscriberClient) SubscribeMessage(ctx context.Context, in *SubscribeMsg, opts ...grpc.CallOption) (NotifSubscriber_SubscribeMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotifSubscriber_ServiceDesc.Streams[0], "/proto.NotifSubscriber/SubscribeMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifSubscriberSubscribeMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotifSubscriber_SubscribeMessageClient interface {
	Recv() (*NotifReply, error)
	grpc.ClientStream
}

type notifSubscriberSubscribeMessageClient struct {
	grpc.ClientStream
}

func (x *notifSubscriberSubscribeMessageClient) Recv() (*NotifReply, error) {
	m := new(NotifReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifSubscriberServer is the server API for NotifSubscriber service.
// All implementations must embed UnimplementedNotifSubscriberServer
// for forward compatibility
type NotifSubscriberServer interface {
	SubscribeMessage(*SubscribeMsg, NotifSubscriber_SubscribeMessageServer) error
	mustEmbedUnimplementedNotifSubscriberServer()
}

// UnimplementedNotifSubscriberServer must be embedded to have forward compatible implementations.
type UnimplementedNotifSubscriberServer struct {
}

func (UnimplementedNotifSubscriberServer) SubscribeMessage(*SubscribeMsg, NotifSubscriber_SubscribeMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMessage not implemented")
}
func (UnimplementedNotifSubscriberServer) mustEmbedUnimplementedNotifSubscriberServer() {}

// UnsafeNotifSubscriberServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifSubscriberServer will
// result in compilation errors.
type UnsafeNotifSubscriberServer interface {
	mustEmbedUnimplementedNotifSubscriberServer()
}

func RegisterNotifSubscriberServer(s grpc.ServiceRegistrar, srv NotifSubscriberServer) {
	s.RegisterService(&NotifSubscriber_ServiceDesc, srv)
}

func _NotifSubscriber_SubscribeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifSubscriberServer).SubscribeMessage(m, &notifSubscriberSubscribeMessageServer{stream})
}

type NotifSubscriber_SubscribeMessageServer interface {
	Send(*NotifReply) error
	grpc.ServerStream
}

type notifSubscriberSubscribeMessageServer struct {
	grpc.ServerStream
}

func (x *notifSubscriberSubscribeMessageServer) Send(m *NotifReply) error {
	return x.ServerStream.SendMsg(m)
}

// NotifSubscriber_ServiceDesc is the grpc.ServiceDesc for NotifSubscriber service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifSubscriber_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotifSubscriber",
	HandlerType: (*NotifSubscriberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMessage",
			Handler:       _NotifSubscriber_SubscribeMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/pushnotification.proto",
}
